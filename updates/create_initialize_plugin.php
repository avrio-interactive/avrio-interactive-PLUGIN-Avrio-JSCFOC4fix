<?php

namespace Avrio\Jscfoc4fix\Updates;

/**
 * October CMS 4 Compatibility Fix Migration
 * 
 * @package     Avrio\Jscfoc4fix
 * @author      Avrio Interactive Sp. z o.o.
 * @copyright   2025 Avrio Interactive Sp. z o.o.
 * @license     MIT License
 * @link        https://avrio.pl
 * 
 * This migration handles the vendor folder restructuring necessary for 
 * October CMS 4 compatibility with janvince/smallcontactform plugin.
 */

use October\Rain\Database\Updates\Migration;
use Illuminate\Support\Facades\Log;

/**
 * This migration handles the vendor folder fix for janvince/smallcontactform
 * 
 * What it does:
 * 1. Renames vendor/ to vendor.disabled/ to prevent composer/installers conflicts
 * 2. Creates minimal vendor/ with only ReCaptcha library
 * 3. Creates safe autoloader that doesn't conflict with October CMS 4
 * 
 * This is necessary because:
 * - Original vendor/composer/installers conflicts with October CMS 4 DI container
 * - Causes "Target class [core.composer] does not exist" fatal error
 * - Only ReCaptcha is actually needed for the contact form functionality
 */
class CreateInitializePlugin extends Migration
{
    public function up()
    {
        Log::info('jscfoc4fix: Starting vendor folder compatibility fix for janvince/smallcontactform');
        
        // This migration handles the vendor folder fix for janvince/smallcontactform
        $this->fixVendorFolder();
        $this->createMinimalVendorStructure();
        
        Log::info('jscfoc4fix: Vendor folder fix completed. Original vendor folder backed up to vendor.disabled/');
    }

    public function down()
    {
        Log::info('jscfoc4fix: Reverting vendor folder changes');
        
        // Restore original vendor folder
        $this->restoreVendorFolder();
        
        Log::info('jscfoc4fix: Original vendor folder restored. WARNING: This will cause October CMS 4 crashes!');
    }

    protected function fixVendorFolder()
    {
        $vendorPath = base_path('plugins/janvince/smallcontactform/vendor');
        $vendorDisabledPath = base_path('plugins/janvince/smallcontactform/vendor.disabled');
        
        if (is_dir($vendorPath) && !is_dir($vendorDisabledPath)) {
            try {
                rename($vendorPath, $vendorDisabledPath);
                Log::info('jscfoc4fix: Successfully moved problematic vendor folder to vendor.disabled/');
            } catch (\Exception $e) {
                Log::error('jscfoc4fix: Could not move vendor folder: ' . $e->getMessage());
                throw new \Exception('Failed to backup original vendor folder. Please check permissions.');
            }
        } elseif (is_dir($vendorDisabledPath)) {
            Log::info('jscfoc4fix: vendor.disabled/ already exists, skipping backup');
        } else {
            Log::warning('jscfoc4fix: No vendor folder found to backup');
        }
    }
    
    protected function createMinimalVendorStructure()
    {
        $vendorPath = base_path('plugins/janvince/smallcontactform/vendor');
        $vendorDisabledPath = base_path('plugins/janvince/smallcontactform/vendor.disabled');
        
        if (!is_dir($vendorPath)) {
            mkdir($vendorPath, 0755, true);
        }
        
        // Copy only ReCaptcha library
        if (is_dir($vendorDisabledPath . '/google')) {
            $this->recursiveCopy($vendorDisabledPath . '/google', $vendorPath . '/google');
            Log::info('jscfoc4fix: Copied ReCaptcha library to new vendor structure');
        }
        
        // Create safe autoloader
        $autoloadContent = $this->getSafeAutoloaderContent();
        file_put_contents($vendorPath . '/autoload.php', $autoloadContent);
        Log::info('jscfoc4fix: Created safe autoloader for ReCaptcha');
    }
    
    protected function getSafeAutoloaderContent()
    {
        return '<?php
// Safe autoloader for October CMS 4 compatibility
// Generated by avrio/jscfoc4fix plugin
// Only loads ReCaptcha to avoid composer/installers conflicts

if (!defined("RECAPTCHA_AUTOLOADER_LOADED")) {
    define("RECAPTCHA_AUTOLOADER_LOADED", true);
    
    spl_autoload_register(function ($class) {
        if (strpos($class, "ReCaptcha\\\\") === 0) {
            $file = __DIR__ . "/google/recaptcha/src/" . str_replace("\\\\", "/", $class) . ".php";
            if (file_exists($file)) {
                require_once $file;
                return true;
            }
        }
        return false;
    });
}

return true;
';
    }

    protected function restoreVendorFolder()
    {
        $vendorPath = base_path('plugins/janvince/smallcontactform/vendor');
        $vendorDisabledPath = base_path('plugins/janvince/smallcontactform/vendor.disabled');
        
        if (is_dir($vendorDisabledPath)) {
            try {
                // Remove the minimal vendor structure
                if (is_dir($vendorPath)) {
                    $this->removeDirectory($vendorPath);
                }
                
                // Restore original vendor
                rename($vendorDisabledPath, $vendorPath);
                Log::info('jscfoc4fix: Restored original vendor folder');
            } catch (\Exception $e) {
                Log::error('jscfoc4fix: Could not restore vendor folder: ' . $e->getMessage());
            }
        }
    }
    
    protected function recursiveCopy($src, $dst)
    {
        if (!is_dir($src)) {
            return false;
        }
        
        if (!is_dir($dst)) {
            mkdir($dst, 0755, true);
        }
        
        $dir = opendir($src);
        while (($file = readdir($dir)) !== false) {
            if ($file != "." && $file != "..") {
                if (is_dir($src . "/" . $file)) {
                    $this->recursiveCopy($src . "/" . $file, $dst . "/" . $file);
                } else {
                    copy($src . "/" . $file, $dst . "/" . $file);
                }
            }
        }
        closedir($dir);
        return true;
    }
    
    protected function removeDirectory($dir)
    {
        if (!is_dir($dir)) {
            return false;
        }
        
        $files = array_diff(scandir($dir), array('.', '..'));
        foreach ($files as $file) {
            $path = $dir . '/' . $file;
            is_dir($path) ? $this->removeDirectory($path) : unlink($path);
        }
        return rmdir($dir);
    }
}
